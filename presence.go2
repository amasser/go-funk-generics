package main

// func Contains[T comparable](in []T, elem T) bool {
// 	for _, val := range in {
// 		if val == elem {
// 			return true
// 		}
// 	}
// 	return false
// }

// func ContainsEquals[T Equaler[T]](in []T, elem T) bool {
// 	for _, val := range in {
// 		if val.Equals(elem) {
// 			return true
// 		}
// 	}
// 	return false
// }

// An interface based version would require reflection!
// func ContainsNormal(in []interface{}, f func(interface{}) bool) bool {
// 	for _, val := range in {
// 		if f(val) {
// 			return true
// 		}
// 	}
// 	return false
// }

