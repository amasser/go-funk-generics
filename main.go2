package main

import (
	"fmt"
	"strconv"
	"time"
	"math/rand"
)

type Foo struct {
	Bar string
}

func (f *Foo) Equals(g *Foo) bool {
	return f != nil && g != nil && f.Bar == g.Bar
}

func (f *Foo) String() string {
	return f.Bar
}

func main() {
	fmt.Println("Chaining example")
	var l List[int]
	x := Mappable[string, string](
		Mappable[int, string](
			l.Append(1,2,3,4,5,6,7,8,9,10).
			Filter(func(i int) bool {
				return i % 2 == 0
			}),
		).Map(strconv.Itoa),
	).Reduce("", func (prev, cur string) string {
		return prev + cur + ";"
	})
	fmt.Println(x)

	fmt.Println("Unchained example")
	x1 := Filter[int]([]int{1,2,3,4,5,6,7,8,9,10}, func(i int) bool {
		return i % 2 == 0
	})
	x2 := Map[int, string](x1, strconv.Itoa)
	x3 := Reduce[string, string](x2, "", func (prev, cur string) string {
		return prev + cur + ";"
	})
	fmt.Println(x3)

	fmt.Println()

	fmt.Println("Contains", Contains([]int{1,2,3}, func(i int) bool { return i == 3 }))
	fmt.Println("Intersection", Intersection([]int{1,2,3}, []int{2,3,4}, func(a, b int) bool { return a == b }))
	a, b := Difference([]int{1,2,3,4},[]int{2,4,6}, func(a, b int) bool { return a == b })
	fmt.Println("Difference", a, b)
	fmt.Println("IndexOf", IndexOf([]int{1,2,3}, func(i int) bool { return i == 3 }))
	fmt.Println("LastIndexOf", LastIndexOf([]int{1,2,3,2,1}, func(i int) bool { return i == 2 }))
	fmt.Println("ToMap", ToMap([]*Foo{
		{ Bar: "one" },
		{ Bar: "two" },
		{ Bar: "three" },
	}, func(f *Foo) string { return f.Bar }))
	fmt.Println("Filter", Filter([]int{1,2,3,4,5,6,7,8,9,10}, func(i int) bool {
		return i % 2 == 0
	}))
	fmt.Println("*", *Find([]int{1,2,3,4,5,6,7,8,9,10}, func(i int) bool {
		return i == 7
	}))
	fmt.Println("Map", Map([]int{1,2,3,4,5,6,7,8,9,10}, strconv.Itoa))
	fmt.Println("Keys", Keys(map[string]int{
		"one": 1,
		"two": 2,
		"three": 3,
	}))
	fmt.Println("Values", Values(map[string]int{
		"one": 1,
		"two": 2,
		"three": 3,
	}))
	fmt.Println("ForEach")
	ForEach([]int{1,2,3,4,5,6,7,8,9,10}, func(i int) { fmt.Printf("%d;", i) })
	fmt.Println("ForEachRight")
	ForEachRight([]int{1,2,3,4,5,6,7,8,9,10}, func(i int) { fmt.Printf("%d;", i) })
	fmt.Println("Max", Max(5, 3))
	fmt.Println("Chunk", Chunk([]int{1,2,3,4,5,6,7,8,9,10}, 3))
	fmt.Println("Flatten", Flatten([][]int{
		[]int{1,2,3,4,5},
		[]int{6,7,8,9,10},
	}))
	fmt.Println("Uniq", Uniq([]int{1,1,1,1}))
	fmt.Println("Drop", Drop([]int{1,2,3,4}, 2))
	fmt.Println("Initial", Initial([]int{1,2,3,4}))
	fmt.Println("Tail", Tail([]int{1,2,3,4}))
	fmt.Println("Shuffle", Shuffle([]int{1,2,3,4,5,6,7,8,9,10}))
	fmt.Println("Subtract", Subtract([]int{1,2,3,4}, []int{0, 4}, func(a, b int) bool { return a == b }))
	fmt.Println("Sum", Sum(1,2,3,4))
	fmt.Println("Reverse", Reverse([]int{1,2,3,4}))
	fmt.Println("Subset", Subset([]int{2,4}, []int{1,2,3,4}, func(a, b int) bool { return a == b }))
}

func init() {
	rand.Seed(time.Now().UTC().UnixNano())
}